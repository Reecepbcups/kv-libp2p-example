package redis

import (
	"bufio"
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	peerstore "github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/protocol/ping"
)

type Server struct {
	Node         host.Host
	PingService  *ping.PingService
	RedisService *RedisService

	Store *Store // TODO: create a service for which we can set & get off this value on the main server instance
}

func NewServer(s *Store) *Server {
	node := CreateNode()

	// override the default ping service
	ps := &ping.PingService{
		Host: node,
	}

	rs := NewRedisService(node, s)

	node.SetStreamHandler(ping.ID, func(s network.Stream) {
		// go ps.PingHandler(s) // TODO:
		rs.RedisHandler(s)
	})

	return &Server{
		Node:         node,
		PingService:  ps,
		RedisService: rs,
		Store:        s,
	}
}

func redisProtocol(s network.Stream) error {
	buf := bufio.NewReader(s)
	message, err := buf.ReadString('\n')
	if err != nil {
		return err
	}

	connection := s.Conn()
	fmt.Printf("Message from '%s': %s\n", connection.RemotePeer(), message)
	return nil
}

func CreateNode() host.Host {
	// start a libp2p node with default settings
	node, err := libp2p.New(
		libp2p.ForceReachabilityPublic(),
		libp2p.ListenAddrStrings("/ip4/0.0.0.0/tcp/0"),
		libp2p.Ping(false),
	)
	if err != nil {
		panic(err)
	}
	return node
}

func RunTargetNode() peer.AddrInfo {
	targetNode := CreateNode()

	// TODO: impl steam handler for the /redis/1.0.0 protocol
	targetNode.SetStreamHandler("/redis/1.0.0", func(s network.Stream) {
		fmt.Println("Received a new stream")
		if err := redisProtocol(s); err != nil {
			s.Reset()
		} else {
			s.Close()
		}

	})

	return *host.InfoFromHost(targetNode)
}
func RunSourceNode(targetNodeInfo peer.AddrInfo) {
	sourceNode := CreateNode()

	if err := sourceNode.Connect(context.Background(), targetNodeInfo); err != nil {
		panic(fmt.Errorf("failed to connect to target node: %s", err))
	}

	stream, err := sourceNode.NewStream(context.Background(), targetNodeInfo.ID, "/redis/1.0.0")
	if err != nil {
		panic(fmt.Errorf("failed to create stream: %s", err))
	}

	message := "Hello from Launchpad\n"
	fmt.Printf("Sending message: %s", message)
	_, err = stream.Write([]byte(message))
	if err != nil {
		panic(fmt.Errorf("failed to write to stream: %s", err))
	}

}

func (s *Server) Start() {
	fmt.Println("Server started")
	s.PrintPeerInfo()
	fmt.Println("Listen addresses:", s.Node.Addrs())
}

func (s *Server) PrintPeerInfo() {
	// print the node's PeerInfo in multiaddr format
	peerInfo := peerstore.AddrInfo{
		ID:    s.Node.ID(),
		Addrs: s.Node.Addrs(),
	}
	addrs, err := peerstore.AddrInfoToP2pAddrs(&peerInfo)
	if err != nil {
		panic(err)
	}
	fmt.Println("libp2p node address:", addrs)
}

func (s *Server) Stop() {
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
	<-ch
	fmt.Println("Received signal, shutting down...")
	if err := s.Node.Close(); err != nil {
		panic(err)
	}
}
